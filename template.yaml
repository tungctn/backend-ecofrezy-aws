AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Ecofrenzy API
Globals:
  Function:
    Timeout: 600

Resources:
  MyUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: myUserPoolId
      Type: String
      Value: !Ref CognitoUserPool

  MyClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: myClientId
      Type: String
      Value: !Ref CognitoUserPoolClient
  # Tạo Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          # RequireSymbols: True
          # RequireUppercase: True
      Schema:
        - AttributeDataType: String
          Name: email
          Required: True
          Mutable: True
      AutoVerifiedAttributes:
        - email

  # Tạo Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyUserPoolClient
      UserPoolId:
        Ref: CognitoUserPool
      GenerateSecret: False
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - 'https://example.com/callback'
      AllowedOAuthFlowsUserPoolClient: True
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  # Tạo Cognito Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: MyIdentityPool
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: [CognitoUserPool, ProviderName]


  # Add S3 Bucket resource
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ecofrenzy-img

  ExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ['*/*']

  ExpressFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/
      Handler: lambda.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Role: !GetAtt ExpressFunctionRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        ExpressFunctionProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/api/{proxy+}"
            Method: ANY
        ExpressFunctionRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/api/"
            Method: ANY

  ExpressFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      
        # Add DynamoDB access policy
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: "*"
        
        # Add S3 access policy
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "${S3Bucket.Arn}/*"

        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        
        - PolicyName: ExpressFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myUserPoolId'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myClientId'

Outputs:

  ExpressFunctiondApi:
    Description: "API Gateway endpoint URL for Prod stage for Express function"
    Value: !Sub "https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  ExpressFunction:
    Description: "Express Lambda Function ARN"
    Value: !GetAtt ExpressFunction.Arn
  ExpressFunctionIamRole:
    Description: "Implicit IAM Role created for Express function"
    Value: !GetAtt ExpressFunctionRole.Arn
  # Add S3 Bucket output
  S3BucketOutput:
    Description: "S3 Bucket for storing files"
    Value: !Ref S3Bucket
  UserPoolId:
    Description: User Pool ID
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Description: User Pool Client ID
    Value:
      Ref: CognitoUserPoolClient

  IdentityPoolId:
    Description: Identity Pool ID
    Value:
      Ref: CognitoIdentityPool
