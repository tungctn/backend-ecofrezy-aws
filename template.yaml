AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Ecofrenzy API
Globals:
  Function:
    Timeout: 600

Resources:
  # Add S3 Bucket resource
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ecofrenzy-images


  # Add Cognito User Pool resource
  # CognitoUserPool:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: EcofrenzyUserPool
  #     AutoVerifiedAttributes:
  #       - email
  #     Policies:
  #       PasswordPolicy:
  #         MinimumLength: 8
  #         RequireLowercase: True
  #         RequireNumbers: True
  #         RequireSymbols: True
  #         RequireUppercase: True

  # # Add Cognito User Pool Client resource
  # CognitoUserPoolClient:
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     ClientName: EcofrenzyUserPoolClient
  #     GenerateSecret: False
  #     UserPoolId: !Ref CognitoUserPool

  # # Add Cognito Identity Pool resource
  # CognitoIdentityPool:
  #   Type: AWS::Cognito::IdentityPool
  #   Properties:
  #     IdentityPoolName: EcofrenzyIdentityPool
  #     AllowUnauthenticatedIdentities: False
  #     CognitoIdentityProviders:
  #       - ClientId: !Ref CognitoUserPoolClient
  #         ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}'

  # # Add Cognito Identity Pool Roles resource
  # CognitoIdentityPoolRoles:
  #   Type: AWS::Cognito::IdentityPoolRoleAttachment
  #   Properties:
  #     IdentityPoolId: !Ref CognitoIdentityPool
  #     Roles:
  #       authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  # # Add Cognito Authenticated Role resource
  # CognitoAuthenticatedRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Federated: 'cognito-identity.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRoleWithWebIdentity'
  #           Condition:
  #             StringEquals:
  #               'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
  #             'ForAnyValue:StringLike':
  #               'cognito-identity.amazonaws.com:amr': authenticated
  #     Policies:
  #       - PolicyName: CognitoAuthenticatedPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'mobileanalytics:PutEvents'
  #                 - 'cognito-sync:*'
  #                 - 'cognito-identity:*'
  #               Resource: '*'


  ExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ['*/*']

  ExpressFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/
      Handler: lambda.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Role: !GetAtt ExpressFunctionRole.Arn
      Events:
        ExpressFunctionProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/api/{proxy+}"
            Method: ANY
        ExpressFunctionRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/api/"
            Method: ANY

  ExpressFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # Add DynamoDB access policy
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: "*"
        # Add S3 access policy
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"

        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

Outputs:

  ExpressFunctiondApi:
    Description: "API Gateway endpoint URL for Prod stage for Express function"
    Value: !Sub "https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  ExpressFunction:
    Description: "Express Lambda Function ARN"
    Value: !GetAtt ExpressFunction.Arn
  ExpressFunctionIamRole:
    Description: "Implicit IAM Role created for Express function"
    Value: !GetAtt ExpressFunctionRole.Arn
  # Add S3 Bucket output
  S3BucketOutput:
    Description: "S3 Bucket for storing files"
    Value: !Ref S3Bucket
  # Add Cognito User Pool output
  # CognitoUserPoolOutput:
  #   Description: "Cognito User Pool ID"
  #   Value: !Ref CognitoUserPoo
  # CognitoUserPoolClientOutput:
  #   Description: "Cognito User Pool Client ID"
  #   Value: !Ref CognitoUserPoolClient
  # CognitoIdentityPoolOutput:
  #   Description: "Cognito Identity Pool ID"
  #   Value: !Ref CognitoIdentityPool
  # CognitoAuthenticatedRoleOutput:
  #   Description: "Cognito Authenticated Role ARN"
  #   Value: !GetAtt CognitoAuthenticatedRole.Arn
